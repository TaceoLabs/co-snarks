{"noir_version":"1.0.0-beta.0+7311d8ca566c3b3e0744389fc5e4163741927767","hash":3945826767250611818,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"std::cmp::Ordering","fields":[{"name":"result","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"7Z3bbts4EIbfxde+4Bx46qssFos0TYsAQVIk6QKLIu++dlrJrg9yXdPSPyJvgiih6J8/7W9mRFP6vvh09/Hbl3/uHz8/vSw+/PV98fB0e/N6//S4Ovq+cO9/evl687g+enm9eX5dfBAny8Xd46fVb8Rvy8Xn+4e7xYeQ3pb7TTnkri3HONyYMnUdU+a03fjv5YJwpDCOFMGRojhSPI6UgCMl4khJOFIyEOKQcAvEWwICLgERl4CQS0DMJSDoEhB1CQi7BMRdBuIuI+W5QNxlIO4yEHcZiLsMxF0G4i4DcZeBuCtA3BUg7grSBYaRuetDryXHXS0KpMUDaQlAWiKQlgSkJeNoUQekhYC0MJAWIO4qEHcViLsKxF0F4q6Oyl12rD8bs1M6IXz12p1wYT3ROKXNKJ30jVfnrUeZZzLK7H0/ypi2R7nfWEP82VbzliH+fdXFzcMQdo76nrcan28IzcQQ6isEJsk7nwPPMxkla98zJxmedpLUzTup87uWSLNk1xKt0RIvfWntfbiAJL65d4F7oUr3Yh/Wfb4krMfm3gXuIefC4nr3dDeJ98jp7ZDwgJyGDgofN10kjf3HIexpYSAt42ZTQv2ECuddLQqkxQNpCUBaIpCWBKQl42iJDkgLAWlhIC1A3I1A3I1A3I1A3I1A3I1A3I1A3E1A3E1A3E1A3E1A3E1A3E1A3E1A3E1A3E1A3E1A3M1A3M1A3M1A3M1A3M1A3M1A3M0jczf4XsvWVeCDjaNIJzxK3Fr/er8OnCOwcB0Snqw6no06Ts4ZtZwcmfWczXouZj1Xs557s55bDaDkrEZQclZDKDmzMZTMxlAyG0PJbAwlszF03HsAFPXcbAwlszGUzMZQMhtDyWwMZbMxlM3GUDYbQ9lsDB33fg5FPTcbQ9lsDGWzMZTNxlA2G0PFbAwVszFUzMZQMRtDx703R1HPzcZQMRtDxWwMFbMxVMzGUDUbQ9VsDFWzMVTNxtBx77NS1HOzMVTNxlA1G0PVbAxVszHUm42h3mwM9WZjqDcbQ0e+z0hJz83GUG82hvrJYqi6sN34XUxCEpOBxIx8S4fE3W3fOO/dpYFGvk3DCTGMJEaQxCiSGI8kJiCJiUhiEpKYDCQmIhE4IhE4IhE4IhE4IhE4IhE4IhE4IhE4IhE4IhE4IRE4IRE4IRE4IRE4IRE4IRE4IRE4IRE4IRE4IRE4IxE4IxE4IxE4IxE4IxE4IxE4IxE4IxE4IxE4AxGYHRCB2QERmB0QgdkBEZgdEIHZARGYHRCB2QERmB0QgdkhEZiQCExIBCYkAhMSgQmJwIREYEIiMCERmJAITEgEZiQCMxKBGYnAjERgRiIwIxGYkQjMSARmJAIzEoEFicCCRGBBIrAgEViQCCxIBBYkAgsSgQWJwIJEYEUisCIRWJEIrEgEPrK5klL3AionxHjtHjYpPpx60p+LnXJy+VTjweeM85HNlRDKSz07nI/sw0QYZLHngfORLZsQgxx8xjcf2bJpQXnGVV7u8dp8ZH/n7IZJMxlmqWdb85FNpjU7InNxpNAzqNnj5j5TOTJyTpV7qBHpbmrqA5KYiCTm8rQj92LCqXKjZNLuM67yYkl7cLCDLJe0B8Id5HDqGxhXecGcMEgdw9SZDLNYohd8c2THkTAXR0oleiE2R3YcGTmnGkzwQgYSEx2SmIvTjki9mPhr4/f++cr9y5X71yv376/c/8WojrFvG9OJxZHgXdc4eKFtJhxaduGONbJaRh9mDafYJ9ppa43mZ9YSYx3DTHUMM1cxzOTqGCbNZJg5d4mUONornBLXMUypY5g6j2GKk80wNZ/wZCNjteDjTpQKw1cmk28GnjCw2AXSNJMkz4TXM8k0TXg9k3T3el6XW39IM8m5LXidZ5L4X9Hr4SWnPJOSYjoDZ1KsTGfgTMqg6QzUZuCJxgVXdXOrxsZ0u9VjRd0utnCdW/EGOjGt0gOdmFYWlp2YQt+vENdqSNCJqbM23Xh9EjjDKwfi6qxNzzGw1BVWcXWWsdN4rc3rt3GusIqrs96dxus6q91zvB68FCauzqq0oIF1Vo8FDayzyjvHwHKXB4XqLN2mcrvVY0XdLnVpSajVeaAT04pC0InRNjGQ1/yolZugE1NlbRq42xLGwfvLsqcqa9OSBlZZm55lYLn4WGUZO43XXGURO5HXVZaw53ldKmPgKqvSibyeS6FJ5LrGxP5U2lxsk53wXArC6xlYbPmW51LjWfB6LmWbBa/nUuFdzetyS+U8l2LQgtdzKQav5/XworDMpcKbzMC5lG2TGTiXWux6BhZcKJdWjY3ptja3S7pd7GKbtDoPdGJaUQg6Ma2CxNyKJK3cBJ2YOmvTcnvEtM7adJJ9S1pnGTuN13VWvJPsW9I6691pvNbm9UWXwrTOqrSggXVWjwUNrLPKm2jXktZZuk3ldqvHMHe8+FbngU5MKwpBJ6ZVkJhbkXwrN0EnRmucmIJbnHyVtWlJA6usTafZS+OrLGMn8rrKInYir6ssYafZtxSqrEon8Hp18PH5/uHh/ss/D0+3N6/3T48v6xPd+sfh3b65X7LIvz7t9sDrsu9fmKMMG+vVdQvSXrfXQn7cJ9kBaSEgLQykRYC0KJAWj6JldUDvn+yD7pCjThI5OQGg6LpSMm49IftHvn34bi3lug+Xd99nBVF3F2IO35HjzO47ksew+9Waw/erKNd9vrz71D38Pua9h82663ZPF3efuHv7J9195xym5Zndd3E3/ZpOHgXged3HbmrTvjlasPu887FaHfAAGsh1J65+Tb/3iSHtUxQK4fc+BsPn5PPPOfKGHT6H/uAc/oNz5A/O0fPPOfxtyOR8l5wmF/fyQjn+bhg8c3X0783z/c3Hh7t1Krn+57fH2y6zXB2+/ve1+0+Xe359frq9+/Tt+W6dhW4S0LU9nJaS1nO/nkfJS9VNFFv/ieNSePPufW/FS4mbIaz/RHHJq1ZvK33/Aw==","file_map":{"24":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"25":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"68":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Mul, Sub};\nfn main(x: Field, y: pub Field) -> pub Ordering{\n    let new_x= Quantized::new(x);\n    let new_y= Quantized::new(y);\n    let zero= Quantized::zero();\n    let add0= new_x+zero;\n    let sub= add0-new_y;\n    let mul= new_x*sub;\n    Quantized::cmp(mul,new_y)\n\n}\n\npub struct Quantized {\n    // if value positive: x*scale\n    // if negative: (p-x)*scale, where p is the prime of native Field (in this case from barretenberg)\n    // the original value is max 60 bits, positive or negative,\n    // this leaves enough space for additions and additions of single multiplications\n    // 2^60-1 = 1152921504606846975\n    // -1152921504606846975 <= x <= 1152921504606846975\n    // -1152921504606846975/65536 <= value <= 1152921504606846975/65536\n    pub x: Field,\n}\npub unconstrained fn get_bytes(x: Field) -> [u8; 32] {\n    x.to_be_bytes()\n}\n\n/// Check if the integer value is possitive based on the Field value used to\n/// encode it.\npub fn is_positive(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes == 0\n}\n\n// check if there are bytes from 0-15, then it is negative\n// This assumes the values that are multiplied have max ~60-63 bits\npub fn is_negative(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes != 0\n}\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n        let mut bytes: [u8; 32] = [0; 32];\n        unsafe {\n            bytes = get_bytes(temp);\n        }\n\n        assert(Field::from_be_bytes::<32>(bytes) == temp);\n\n        let negative = is_negative(temp);\n\n        // To correctly scale down we temporary flip the sign\n        if negative {\n            temp = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - temp\n                + 1;\n            unsafe {\n                bytes = get_bytes(temp);\n            }\n\n            assert(Field::from_be_bytes::<32>(bytes) == temp);\n        }\n\n        // Chop off 2 bytes to scale down by 2^16 and truncate\n        let mut truncated: [u8; 32] = [0; 32];\n        for i in 0..30 {\n            // [0, 0, am, .., a2] (chop off a0 and a1)\n            truncated[i + 2] = bytes[i];\n        }\n\n        let mut new_x: Field = Field::from_be_bytes::<32>(truncated);\n        // Flip back sign if the output is negative\n        if negative {\n            new_x = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - new_x\n                + 1;\n        }\n\n        Quantized { x: new_x }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized { // TODO is it cheaper to create a function that returns a bool directly?\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        }\n\n        let self_positive = is_positive(self.x);\n        let other_positive = is_positive(other.x);\n\n        if (self_positive & !other_positive) {\n            Ordering::greater()\n        } else if self_positive == other_positive {\n            let self_smallest = self.x.lt(other.x);\n            if self_smallest {\n                Ordering::less()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            Ordering::less()\n        }\n    }\n}\n","path":"/home/fnieddu/repos/co-snarks/test_vectors/noir/quantized/src/main.nr"}},"names":["main"],"brillig_names":["get_bytes","decompose_hint","lte_hint","field_less_than","directive_invert"]}