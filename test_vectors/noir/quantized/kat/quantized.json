{"noir_version":"0.39.0+9ae9ef8347ddc608659563050edb6752f5dfb87d","hash":7952399862861882633,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"std::cmp::Ordering","fields":[{"name":"result","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"69":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Mul, Sub};\nfn main(x: Field, y: pub Field) -> pub Ordering{\n    let new_x= Quantized::new(x);\n    let new_y= Quantized::new(y);\n    let zero= Quantized::zero();\n    let add0= new_x+zero;\n    let sub= add0-new_y;\n    let mul= new_x*sub;\n    Quantized::cmp(mul,new_y)\n\n}\n\npub struct Quantized {\n    // if value positive: x*scale\n    // if negative: (p-x)*scale, where p is the prime of native Field (in this case from barretenberg)\n    // the original value is max 60 bits, positive or negative,\n    // this leaves enough space for additions and additions of single multiplications\n    // 2^60-1 = 1152921504606846975\n    // -1152921504606846975 <= x <= 1152921504606846975\n    // -1152921504606846975/65536 <= value <= 1152921504606846975/65536\n    pub x: Field,\n}\npub unconstrained fn get_bytes(x: Field) -> [u8; 32] {\n    x.to_be_bytes()\n}\n\n/// Check if the integer value is possitive based on the Field value used to\n/// encode it.\npub fn is_positive(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes == 0\n}\n\n// check if there are bytes from 0-15, then it is negative\n// This assumes the values that are multiplied have max ~60-63 bits\npub fn is_negative(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes != 0\n}\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n        let mut bytes: [u8; 32] = [0; 32];\n        unsafe {\n            bytes = get_bytes(temp);\n        }\n\n        assert(Field::from_be_bytes::<32>(bytes) == temp);\n\n        let negative = is_negative(temp);\n\n        // To correctly scale down we temporary flip the sign\n        if negative {\n            temp = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - temp\n                + 1;\n            unsafe {\n                bytes = get_bytes(temp);\n            }\n\n            assert(Field::from_be_bytes::<32>(bytes) == temp);\n        }\n\n        // Chop off 2 bytes to scale down by 2^16 and truncate\n        let mut truncated: [u8; 32] = [0; 32];\n        for i in 0..30 {\n            // [0, 0, am, .., a2] (chop off a0 and a1)\n            truncated[i + 2] = bytes[i];\n        }\n\n        let mut new_x: Field = Field::from_be_bytes::<32>(truncated);\n        // Flip back sign if the output is negative\n        if negative {\n            new_x = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - new_x\n                + 1;\n        }\n\n        Quantized { x: new_x }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized { // TODO is it cheaper to create a function that returns a bool directly?\n    fn cmp(self: Self, other: Self) -> Ordering {\n        if self.x == other.x {\n            Ordering::equal()\n        }\n\n        let self_positive = is_positive(self.x);\n        let other_positive = is_positive(other.x);\n\n        if (self_positive & !other_positive) {\n            Ordering::greater()\n        } else if self_positive == other_positive {\n            let self_smallest = self.x.lt(other.x);\n            if self_smallest {\n                Ordering::less()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            Ordering::less()\n        }\n    }\n}\n","path":"/home/fnieddu/repos/co-snarks/test_vectors/noir/quantized/src/main.nr"}},"names":["main"],"brillig_names":["get_bytes","decompose_hint","lte_hint","field_less_than","directive_invert"]}