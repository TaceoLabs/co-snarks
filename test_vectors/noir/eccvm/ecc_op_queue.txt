std::vector<uint8_t> buffer;

for (const auto &i : op_queue->get_eccvm_ops_table().get()) {
  for (const auto &k : i) {
    uint8_t op_code_as_u8 =
        static_cast<uint8_t>((static_cast<int>(k.op_code.add) << 0) |
                             (static_cast<int>(k.op_code.mul) << 1) |
                             (static_cast<int>(k.op_code.eq) << 2) |
                             (static_cast<int>(k.op_code.reset) << 3));
    buffer.push_back(op_code_as_u8);
    auto base_point_buffer = k.base_point.to_buffer();
    buffer.insert(buffer.end(), base_point_buffer.begin(),
                  base_point_buffer.end());

    std::vector<uint64_t> reversed;
    reversed.push_back(k.z1.data[3]);
    reversed.push_back(k.z1.data[2]);
    reversed.push_back(k.z1.data[1]);
    reversed.push_back(k.z1.data[0]);
    for (auto byte : reversed) {
      std::vector<uint8_t> bytes(8);
      for (size_t i = 0; i < 8; ++i) {
        bytes[7 - i] = static_cast<uint8_t>((byte >> (i * 8)) & 0xFF);
      }
      buffer.insert(buffer.end(), bytes.begin(), bytes.end());
    }
    std::vector<uint64_t> reversed2;
    reversed2.push_back(k.z2.data[3]);
    reversed2.push_back(k.z2.data[2]);
    reversed2.push_back(k.z2.data[1]);
    reversed2.push_back(k.z2.data[0]);
    for (auto byte : reversed2) {
      std::vector<uint8_t> bytes(8);
      for (size_t i = 0; i < 8; ++i) {
        bytes[7 - i] = static_cast<uint8_t>((byte >> (i * 8)) & 0xFF);
      }
      buffer.insert(buffer.end(), bytes.begin(), bytes.end());
    }

    auto mul_scalar_full_buffer = k.mul_scalar_full.to_buffer();
    buffer.insert(buffer.end(), mul_scalar_full_buffer.begin(),
                  mul_scalar_full_buffer.end());
  }
}
for (const auto &i : op_queue->get_ultra_ops_table().get().get()) {
  for (const auto &k : i) {
    uint8_t op_code_as_u8 =
        static_cast<uint8_t>((static_cast<int>(k.op_code.add) << 0) |
                             (static_cast<int>(k.op_code.mul) << 1) |
                             (static_cast<int>(k.op_code.eq) << 2) |
                             (static_cast<int>(k.op_code.reset) << 3));
    buffer.push_back(op_code_as_u8);
    auto x_lo_buffer = k.x_lo.to_buffer();
    buffer.insert(buffer.end(), x_lo_buffer.begin(), x_lo_buffer.end());
    auto x_hi_buffer = k.x_hi.to_buffer();
    buffer.insert(buffer.end(), x_hi_buffer.begin(), x_hi_buffer.end());
    auto y_lo_buffer = k.y_lo.to_buffer();
    buffer.insert(buffer.end(), y_lo_buffer.begin(), y_lo_buffer.end());
    auto y_hi_buffer = k.y_hi.to_buffer();
    buffer.insert(buffer.end(), y_hi_buffer.begin(), y_hi_buffer.end());
    auto z1_buffer = k.z_1.to_buffer();
    buffer.insert(buffer.end(), z1_buffer.begin(), z1_buffer.end());
    auto z2_buffer = k.z_2.to_buffer();
    buffer.insert(buffer.end(), z2_buffer.begin(), z2_buffer.end());
    uint8_t return_is_infinity = k.return_is_infinity ? 1 : 0;
    buffer.push_back(return_is_infinity);

    // strn_is_infinity: " << k.return_is_infinity << std::endl;d::cout << "m: "
    // << m++ << std::endl; std::cout << "op_code: add: " << k.op_code.add << "
    // mul: " << k.op_code.mul << " eq: " << k.op_code.eq
    //           << " reset: " << k.op_code.reset << ", x_lo: " << k.x_lo << ",
    //           x_hi: " << k.x_hi
    //           << ", y_lo: " << k.y_lo << ", y_hi: " << k.y_hi << ", z1: " <<
    //           k.z_1 << ", z2: " << k.z_2
    //           << ", retu
  }
}
// This is empty:

// std::cout << "ECCVM Operations reconstructed:" << std::endl;
// for (const auto& i : op_queue->get_eccvm_ops_reconstructed()) {
//     std::cout << "op_code: add: " << i.op_code.add << " mul: " <<
//     i.op_code.mul << " eq: " << i.op_code.eq
//               << " reset: " << i.op_code.reset << ", base_point: " <<
//               i.base_point << ", z1: " << i.z1
//               << ", z2: " << i.z2 << ", mul_scalar_full: " <<
//               i.mul_scalar_full << std::endl;
// }
// std::cout << "Ultra Operations reconstructed:" << std::endl;
// for (const auto& i : op_queue->get_ultra_ops_reconstructed()) {
//     std::cout << "op_code: add: " << i.op_code.add << " mul: " <<
//     i.op_code.mul << " eq: " << i.op_code.eq
//               << " reset: " << i.op_code.reset << ", x_lo: " << i.x_lo << ",
//               x_hi: " << i.x_hi
//               << ", y_lo: " << i.y_lo << ", y_hi: " << i.y_hi << ", z1: " <<
//               i.z_1 << ", z2: " << i.z_2
//               << ", return_is_infinity: " << i.return_is_infinity <<
//               std::endl;
// }

// std::cout << "eccvm_row_tracker: " << std::endl;
// std::array<uint8_t,
// sizeof(op_queue->get_eccvm_row_tracker().cached_num_muls)> bytes;
// std::memcpy(bytes.data(),
//             &op_queue->get_eccvm_row_tracker().cached_num_muls,
//             sizeof(op_queue->get_eccvm_row_tracker().cached_num_muls));
// std::vector<uint8_t> bytes_1(8);
// for (size_t i = 0; i < 4; ++i) {
//     bytes[7 - i] =
//     static_cast<uint8_t>((op_queue->get_eccvm_row_tracker().cached_num_muls
//     >> (i * 8)) & 0xFF);
// }
write(buffer, op_queue->get_eccvm_row_tracker().cached_num_muls);
write(buffer, op_queue->get_eccvm_row_tracker().cached_active_msm_count);
write(buffer, op_queue->get_eccvm_row_tracker().num_transcript_rows);
write(buffer, op_queue->get_eccvm_row_tracker().num_precompute_table_rows);
write(buffer, op_queue->get_eccvm_row_tracker().num_msm_rows);

std::string build = "."; // Replace with the actual path
write_file(build + "/ecc_op_queue", buffer);
info("EccOpQueue saved to ", build);