{"noir_version":"0.33.0+325dac54efb6f99201de9fdeb0a507d45189607d","hash":11941409811987748058,"abi":{"parameters":[{"name":"x1","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"y1","type":{"kind":"field"},"visibility":"public"},{"name":"x2","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"y2","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field/mod.nr"},"29":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\nuse crate::hash::poseidon::PoseidonConfig;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(\n        consts::x5_2_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(\n        consts::x5_3_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(\n        consts::x5_4_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(\n        consts::x5_5_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(\n        consts::x5_6_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(\n        consts::x5_7_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(\n        consts::x5_8_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(\n        consts::x5_9_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(\n        consts::x5_10_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(\n        consts::x5_11_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(\n        consts::x5_12_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(\n        consts::x5_13_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(\n        consts::x5_14_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(\n        consts::x5_15_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(\n        consts::x5_16_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(\n        consts::x5_17_config(),\n        state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"30":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\nmod perm;\nmod consts;\n\nuse crate::hash::poseidon::{PoseidonConfig, absorb};\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of §3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"31":{"source":"mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::field::modulus_num_bits;\nuse crate::hash::Hasher;\nuse crate::default::Default;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\nstruct PoseidonConfig<let T: u32, let N: u32, let X: u32> { \n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n     // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X]\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T]\n) -> [Field; T] {\n    let PoseidonConfig {t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } = pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf/2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf/2+1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O] // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i+1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\n// Check security of sponge instantiation\nfn check_security(rate: Field, width: Field, security: Field) -> bool {\n    let n = modulus_num_bits();\n\n    ((n - 1) as Field * (width - rate) / 2) as u8 > security as u8\n}\n\nstruct PoseidonHasher{\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        } \n        if len == 2 {\n            result = bn254::hash_2([self._state[0],self._state[1]]);\n        } \n        if len == 3 {\n            result = bn254::hash_3([self._state[0],self._state[1],self._state[2]]);\n        } \n        if len == 4 {\n            result = bn254::hash_4([self._state[0],self._state[1],self._state[2],self._state[3]]);\n        } \n        if len == 5 {\n            result = bn254::hash_5([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4]]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5]]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6]]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7]]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8]]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9]]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10]]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11]]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12]]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13]]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13], self._state[14]]);\n        }\n        \n        result\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher{\n    fn default() -> Self{\n        PoseidonHasher{\n            _state: &[],\n        }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a, 0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29, 0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c\n            ];\n            assert_eq(expected, poseidon::bn254::perm::x5_3(state), \"Failed to reproduce output for [0, 1, 2]\");\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465, 0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d, 0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907, 0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e, 0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7\n            ];\n            assert_eq(\n                expected, poseidon::bn254::perm::x5_5(state), \"Failed to reproduce output for [0, 1, 2, 3, 4]\"\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"57":{"source":"use std::hash::poseidon;\n\nfn main(x1: [Field; 2], y1: pub Field, x2: [Field; 4], y2: pub Field) {\n    let hash1 = poseidon::bn254::hash_2(x1);\n    assert(hash1 == y1);\n\n    let hash2 = poseidon::bn254::hash_4(x2);\n    assert(hash2 == y2);\n}\n","path":"/home/fnieddu/repos/collaborative-circom/test_vectors/noir/poseidon_stdlib/src/main.nr"}},"names":["main"]}