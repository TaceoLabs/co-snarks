{"noir_version":"0.39.0+9ae9ef8347ddc608659563050edb6752f5dfb87d","hash":1301744213683310450,"abi":{"parameters":[{"name":"x1","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"y1","type":{"kind":"field"},"visibility":"public"},{"name":"x2","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"y2","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"30":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"31":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::hash::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"32":{"source":"pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::default::Default;\nuse crate::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a,\n                0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29,\n                0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_3(state),\n                \"Failed to reproduce output for [0, 1, 2]\",\n            );\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465,\n                0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d,\n                0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907,\n                0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e,\n                0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7,\n            ];\n            assert_eq(\n                expected,\n                poseidon::bn254::perm::x5_5(state),\n                \"Failed to reproduce output for [0, 1, 2, 3, 4]\",\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon/mod.nr"},"69":{"source":"use std::hash::poseidon;\n\nfn main(x1: [Field; 2], y1: pub Field, x2: [Field; 4], y2: pub Field) {\n    let hash1 = poseidon::bn254::hash_2(x1);\n    assert(hash1 == y1);\n\n    let hash2 = poseidon::bn254::hash_4(x2);\n    assert(hash2 == y2);\n}\n","path":"/home/fabsits/co-snarks/test_vectors/noir/poseidon_stdlib/src/main.nr"}},"names":["main"],"brillig_names":[]}