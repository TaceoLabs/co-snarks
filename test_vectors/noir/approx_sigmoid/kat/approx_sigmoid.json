{"noir_version":"1.0.0-beta.0+7311d8ca566c3b3e0744389fc5e4163741927767","hash":2303413065308010357,"abi":{"parameters":[{"name":"x","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"H4sIAAAAAAAA/9VZS07DMBB1PiVt2tJCWygbNlzAzqd1drDgII2S7LkFB+AOcBIWsOASHIQk2JLrppFQnlHzpMhJHI9m3rwZR4lFfnFbHnfi3CoPR4wV7sk+bO0+7YItS1VbId1EUb4NchayHQ2SlMc0itMNZ5zFPM4CHoY5j/g2SZMtTVgU5qyIk7AQ5myUXyVUHmzTPFDKbCAPDsivIGa5yoNjmIegDBSpB5eY0YNLzOvBBfIwAPnFNR4GpF91cQbyK9tlhcqDtOtqHKjQ+2nXWDpwzJTzWNrSAbBdQ+XCE+NQEiIJ9MSo3huSQ3E5Bkn8oy2q2WIe0K8hMLk9FGXA6f+JciRGXxIiBTgih6L0Sb9EOQL65YOTixafJ3KG3oGQHI5xfu0VCDjmCNnMJgBbeVEjb9IN7QYmdYOuYySHSA1OgdyZyEcV65Tg+8M5wdYe2r+qN0xOvJZnuFouTHAotYPeA6ZAH+eGdUi7oe6HcwO5uSD9qD+03esTj7vqizMDdtfEzLuOi9U7tD9eAusQqBu2Bsao5gKtmQUu5o1JP5cgP8ttMJHvnQMxVhw44rr6srRsiYN2A6t6cqVZF8SP2NszZE2tiJlefEL9LWr6OAPMMzWln1UPfLwy4GMN9EumBRQnMmj5y0NNjgpLGQcN/Hy+fL2/Pe8ydY20t/p+uHn6eH1U585a1g1b1vlH5ixt7Uh7Xv+1RbshkPbHZuxTjxzCV87H2pzMg9uwzjpybWtj27Ntmpg2zEmbCzGq/so4fgDUIfAImx4AAA==","debug_symbols":"tdZLioQwEAbgu2TtIs9K4lWGofHZBETFx8Agffe2GyMSl0UtK/X7LaJlsrG6KdfnI/TtMLP8Z2PdUBVLGPq92pj4Ls1j0X+qeSmmheVKZazpa5Yb/spYG7qG5eBe2T1o9ZFUTl6jvxmTZLJCydq4I6nBJ7Imkw1KNuZMQrobQCZbpCxj0opEdmSyR8mg+ZEEk+6G4HQ0bgq9iN+dVzylJR2t6GhNR+Mm0QNE2rqUBjra0tGOjsZNo/c20j6lJaejcdMouIhHl+ASUlwicW1OXN9wRYlrJA7yxK1OcYPEvTpxf8OBEreUuKPEcdMp9jcacSHT36zilLigxCUlrsjwvSin0HXh+bje8Pflv2IKRdk1R9mufXXpLv9j7MTnx2momnqdmo/07e38Gw==","file_map":{"68":{"source":"fn main(x: u64) -> pub u64 {\n    approx_sigmoid(x)\n}\n\nfn approx_sigmoid(x: u64) -> u64 {\n    // Follows https://github.com/data61/MP-SPDZ/blob/master/Compiler/ml.py#L110\n    // [-5, -2.5, 2.5, 5]\n    let cuts: [u64; 4] = [\n        327680, // -5/2^-16, -327680\n        163840, // -2.5/2^-16, -163840\n        163840, // 163840\n        327680, // 327680\n    ];\n\n    let temp = 1819 * x;\n    let outputs = [\n        6, // 0.0001, 0.0001 / 2^-16 = 6.5536\n        temp + 9502, //0.02776 and 0.145, 0.02776 / 2^-16 = 1819.27936, 0.145/2^-16 = 9502.72\n        (11141 * x) + 32768, //0.17 and 0.5, 0.17 / 2^-16 = 11141.12, 0.5/2^-16 = 32768\n        temp + 56031, //0.02776 and 0.85498, 0.85498/2^-16 = 56031.96928\n        65529, //0.9999 / 2^-16 = 65529.4464\n    ];\n\n    let mut index = 4; // Default to the last index in case x is above all cuts\n    // Determine the correct interval index by checking against each cut\n    if x <= cuts[0] {\n        index = 0;\n    } else if x <= cuts[1] {\n        index = 1;\n    } else if x <= cuts[2] {\n        index = 2;\n    } else if x <= cuts[3] {\n        index = 3;\n    }\n    outputs[index]\n}\n","path":"/home/fabsits/co-snarks/test_vectors/noir/approx_sigmoid/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}