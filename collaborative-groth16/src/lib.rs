pub mod circuit;

#[cfg(test)]
mod tests {
    use ark_bn254::Bn254;
    use ark_ec::pairing::Pairing;
    use ark_ff::UniformRand;
    use ark_groth16::{prepare_verifying_key, Groth16};
    use circom_types::{
        groth16::{witness::Witness, zkey::ZKey},
        r1cs::R1CS,
    };
    use hex_literal::hex;
    use rand::thread_rng;
    use std::io::Cursor;

    use crate::circuit::Circuit;

    #[test]
    fn create_proof_and_verify() {
        let mut witness_bytes = Cursor::new(hex!("77746e73020000000200000001000000280000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000200000080000000000000000100000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000"));
        let mut z_key_bytes = Cursor::new(hex!("7a6b6579010000000a000000010000000400000000000000010000000200000094020000000000002000000047fd7cd8168c203c8dca7168916a81975d588181b64550b829a031e1724e643020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e643004000000010000000400000073d28cba1705727b300c4d4f26b7d77b71c1b109c303f566ee57eadabd6c8313f588a3f993020cc302fc175234fddab40d21651861ae718eccf741fa05176000d04a4f69a9f8bad681ce0acbe902b1f02e14a878ebb7bc908a38ee6f18939308a6c2ad63161ac72c6cc5c85e203a2abf11d61a10efbc34aef4602f22abb5b01b42f07aa08bb3808c929049045f73ed151ea66719b6bfa69c1513ae79087b1b2c69dc0d9c5613c4b69113b4272f3d0faa3c28b56f165e77b1e86c5733681ddf2a7986f829092e149fb023795de98714347245f2378004bedcf3d8431cf747fd2f71aaa81d47be705f008d0f4c0daa9a15057f2f763118773b5dced0950638d8122620bc02d1b5838e72017b493519ebdcdf1a81974726b8fb3b5096af4138571940614ca87d73b4afc4d802585add4360862fa052fc50e9096b7bea3a83f0fe14f6e96b889dfa9d61789b9ef597d27ffefe7d1b23621a9eff06429eaeeb7efd28ee5618c7565b0964bb3c7d3222f957dc76103533be35f9558264fd93e6a0a40da36f7a3fcaa31639fa1de4e9340a728b606ea769b89403399127030df1a036216267c0c710c65477c42f56e98f68002f795bf7cb3c30bfee7f81049dc7d9581a8b47c02966db6e8dd919cf5621e05ba837d74b70a04dbee16b1965275a368a163b9594c507975fa54f69735161cef3233412da21b07411ee18371c45f64c76223ca9402b2396a4ed245a18cd6c1902d45f9b248c785d0c37ec726c85254cab0bbe68bd5b0219638e3b0a2060a2b4e6c577a4126d9942951cdf38e4e827ad4b1b03000000800000000000000016099153f2fd411668c740ad20fec7945d0469594689b902ba7383d092a95006ac52855e3b00774d0acf93ddc5b5738a5637d1714473992acc1e1906e205152a8d0a6a7d9511bd4f4ccf8e2662f8f78780ccfafefe8b05369b6c10836ec599235ed8db8d3ac77b1ed3e26dcb77626be0a2dc3c76b2e2278bd4b155aefddf591d04000000b400000000000000040000000000000000000000020000005a92de414e0f2928ae165d9696ad35d4d7d7c52d79c2062c845be361c17d4d2e010000000000000003000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000100000000000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000200000001000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d016020500000000010000000000008cf61e3a4aa13425775d5ff08202404060925a652bc93e9a7fc5a7593730be2d712cc7faad322531c590fee8cd90afd05dd28ddd00a7f33b77fdee221dffa317558150d964f094187748565ee4dd8929efec7ff8468ca8defa02476c731d1e2d03347af66d3e0cf5d4ff5c2444302c43330d87881fc9474b3cd4b7f8f86a881a01338ecb9fd282ef5b90ff41e0173348272412e4fb403d2dd5e0dee71f790b1df4ba4803e6aa4fb0d4051225f55c17df12a8ee32172348d17ccbc93459d7ebecb9fd282ef5b90ff41e0173348272412e4fb403d2dd5e0dee71f790b1d534234d530e1d08bb8c45f439c0d6ab84ab0924e9f2208e7acd467ac19777819070000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000552245583201c98d7e1d08be9f26a3b9741d48abb18cbb14c67929066f059a034e3327877ae56e1aff8bbfef09551f809abf656dc9abd20e273aaeda85232a14129d38287e07151d25f31c778ab5b3657d59c19f150e61876a41b915cbdbca11daf37d8c7bf8f354dca303a98c9a4916503e4dee85362bf61b57bda11b806f240800000080000000000000004ffaff4781a89ece9ba6866cdb8a310b5f418cf8a8ae06c76ffe55b47f59a918d205e885c8d78fc110bc066ae84f3e632a0139d4d6facbffe5a8b6091718aa21f440b75a0a5ff596bbe7efb8f3a8767a051b58059d5414226318fd5f0eed5903c77ff3e2665ef1bb36fc61d11e27a5cac401cd61ecbef354c3abf5037b7f232a090000000001000000000000660e10145ad96f4e9e049664fa3fde9677df302a8f3be6f7d230fd9c846cf4292481e35acf32d5959817e9a4c04403f109270aa36728ea969c31dae19c3d36238d5b74b2ae86124c36821344a0dcc50bb843a81a110beb0c2940bad25fd1fc1679e442b8be0aedc8f8fedbd34145adf4b6d3e1cab91d88c5bc2fa1e969e1d71060420f30f57545215671888d8074e7ef8f192f16b3d344b91f6e3fd83532a4094f386432eb27added390f1e6f907b60056095a1a811cd7a70c5ca1645cbe0b212c0d4f04c7a4ec14a9c7b5c9a4e7a2112960d19936c247d9d15a043dbf3b4006c4122e1f0abd347f1eef092a891febbd5d8ed785777933b75dea34f3ce8416180a000000e201000000000000c593936fa72c57811543a377249ccf8e930f3b74036772a935b5ef5164416c22098a5b38d0915cbf31ec277e212136e3318b49bf16fe23bf5e57df9a138084c601000000a36f7a3fcaa31639fa1de4e9340a728b606ea769b89403399127030df1a036216267c0c710c65477c42f56e98f68002f795bf7cb3c30bfee7f81049dc7d9581ac28c81432d0b083576971fce01f4c40ae5ee7acd9a1c53bdcf980b6b4badfc2a98d525f54bc4803ce585b9266a62783f6ab5fd0562b38ad05ca8e00338f44e030a7c623370149f5bc0689c8ad5e6a0dd2006899f2dfaea834f4fb906d0bb2908f17bb7e0a34b0edfba1e5188c70f11c8f2308b1fca2501c8946d672d850fbf17b423e1daba119931cb528e298790b1c46546b760c6293ff5cbffbc33224e1b029582ba3426a0e01eb7abc4fbdb459bf10b5ae51d111d07f83810e63db429190b283f4c8319bad425baf564ca236a5674c602e0577ac87ef9c2e6a9af6448c40771ef2e39619ee39cb62860541031e1dc9d01fd88ff877504751ce6c4a2490e063b4ceaac015e155eafabdaef755fc8223f8c0dbc839a57736233c4cc89d83f763ff1751cfab0f43a03d4cce60f34456261664a4cae5f45a8c725e2e9b8841e4b0000000016000000011431737420436f6e7472696275746f72204e616d65"));
        let mut r1cs_bytes =  Cursor::new(hex!("7231637301000000030000000200000078000000000000000100000002000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430010000000300000001000000000000000000000000000000000000000000000000000000000000000100000001000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e643001000000400000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000100000000000000020000000400000000000000010000000300000020000000000000000000000000000000010000000000000002000000000000000300000000000000"));
        let witness = Witness::<ark_bn254::Fr>::from_reader(&mut witness_bytes).unwrap();
        let (pk, _) = ZKey::<Bn254>::from_reader(&mut z_key_bytes)
            .unwrap()
            .split();
        let r1cs = R1CS::<Bn254>::from_reader(&mut r1cs_bytes).unwrap();
        let circuit = Circuit::new(r1cs, witness);
        let public_inputs = circuit.public_inputs();
        let mut rng = thread_rng();
        let r = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let s = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let proof = Groth16::<Bn254>::create_proof_with_reduction(circuit, &pk, r, s)
            .expect("proof generation works");
        let pvk = prepare_verifying_key(&pk.vk);
        Groth16::<Bn254>::verify_proof(&pvk, &proof, &public_inputs).expect("can verify");
    }
}
