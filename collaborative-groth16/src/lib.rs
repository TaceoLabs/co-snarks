mod circom_reduction;
pub mod circuit;

#[cfg(test)]
mod tests {
    use ark_bls12_381::Bls12_381;
    use ark_bn254::Bn254;
    use ark_ec::pairing::Pairing;
    use ark_ff::UniformRand;
    use ark_groth16::{prepare_verifying_key, Groth16};
    use circom_types::{
        groth16::{
            proof::JsonProof, public_input::JsonPublicInput, verification_key::JsonVerificationKey,
            witness::Witness, zkey::ZKey,
        },
        r1cs::R1CS,
    };
    use hex_literal::hex;
    use rand::thread_rng;
    use std::io::Cursor;

    use crate::{circom_reduction::CircomReduction, circuit::Circuit};

    #[test]
    fn create_proof_and_verify_bn254() {
        let mut witness_bytes = Cursor::new(hex!("77746e73020000000200000001000000280000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000200000080000000000000000100000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000"));
        let mut zkey_bytes = Cursor::new(hex!("7a6b6579010000000a000000010000000400000000000000010000000200000094020000000000002000000047fd7cd8168c203c8dca7168916a81975d588181b64550b829a031e1724e643020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e643004000000010000000400000073d28cba1705727b300c4d4f26b7d77b71c1b109c303f566ee57eadabd6c8313f588a3f993020cc302fc175234fddab40d21651861ae718eccf741fa05176000d04a4f69a9f8bad681ce0acbe902b1f02e14a878ebb7bc908a38ee6f18939308a6c2ad63161ac72c6cc5c85e203a2abf11d61a10efbc34aef4602f22abb5b01b42f07aa08bb3808c929049045f73ed151ea66719b6bfa69c1513ae79087b1b2c69dc0d9c5613c4b69113b4272f3d0faa3c28b56f165e77b1e86c5733681ddf2a7986f829092e149fb023795de98714347245f2378004bedcf3d8431cf747fd2f71aaa81d47be705f008d0f4c0daa9a15057f2f763118773b5dced0950638d8122620bc02d1b5838e72017b493519ebdcdf1a81974726b8fb3b5096af4138571940614ca87d73b4afc4d802585add4360862fa052fc50e9096b7bea3a83f0fe14f6e96b889dfa9d61789b9ef597d27ffefe7d1b23621a9eff06429eaeeb7efd28ee5618c7565b0964bb3c7d3222f957dc76103533be35f9558264fd93e6a0a40da36f7a3fcaa31639fa1de4e9340a728b606ea769b89403399127030df1a036216267c0c710c65477c42f56e98f68002f795bf7cb3c30bfee7f81049dc7d9581a8b47c02966db6e8dd919cf5621e05ba837d74b70a04dbee16b1965275a368a163b9594c507975fa54f69735161cef3233412da21b07411ee18371c45f64c76223ca9402b2396a4ed245a18cd6c1902d45f9b248c785d0c37ec726c85254cab0bbe68bd5b0219638e3b0a2060a2b4e6c577a4126d9942951cdf38e4e827ad4b1b03000000800000000000000016099153f2fd411668c740ad20fec7945d0469594689b902ba7383d092a95006ac52855e3b00774d0acf93ddc5b5738a5637d1714473992acc1e1906e205152a8d0a6a7d9511bd4f4ccf8e2662f8f78780ccfafefe8b05369b6c10836ec599235ed8db8d3ac77b1ed3e26dcb77626be0a2dc3c76b2e2278bd4b155aefddf591d04000000b400000000000000040000000000000000000000020000005a92de414e0f2928ae165d9696ad35d4d7d7c52d79c2062c845be361c17d4d2e010000000000000003000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000100000000000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000200000001000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d016020500000000010000000000008cf61e3a4aa13425775d5ff08202404060925a652bc93e9a7fc5a7593730be2d712cc7faad322531c590fee8cd90afd05dd28ddd00a7f33b77fdee221dffa317558150d964f094187748565ee4dd8929efec7ff8468ca8defa02476c731d1e2d03347af66d3e0cf5d4ff5c2444302c43330d87881fc9474b3cd4b7f8f86a881a01338ecb9fd282ef5b90ff41e0173348272412e4fb403d2dd5e0dee71f790b1df4ba4803e6aa4fb0d4051225f55c17df12a8ee32172348d17ccbc93459d7ebecb9fd282ef5b90ff41e0173348272412e4fb403d2dd5e0dee71f790b1d534234d530e1d08bb8c45f439c0d6ab84ab0924e9f2208e7acd467acc98d7e1d08be9f26a3b9741d48abb18cbb14c67929066f059a034e3327877ae56e1aff8bbfef09551f809abf656dc9abd20e273aaeda85232a14129d38287e07151d25f31c778ab5b3657d59c19f150e61876a41b915cbdbca11daf37d8c7bf8f354dca303a98c9a4916503e4dee85362bf61b57bda11b806f240800000080000000000000004ffaff4781a89ece9ba6866cdb8a310b5f418cf8a8ae06c76ffe55b47f59a918d205e885c8d78fc110bc066ae84f3e632a0139d4d6facbffe5a8b6091718aa21f440b75a0a5ff596bbe7efb8f3a8767a051b58059d5414226318fd5f0eed5903c77ff3e2665ef1bb36fc61d11e27a5cac401cd61ecbef354c3abf5037b7f232a090000000001000000000000660e10145ad96f4e9e049664fa3fde9677df302a8f3be6f7d230fd9c846cf4292481e35acf32d5959817e9a4c04403f109270aa36728ea969c31dae19c3d36238d5b74b2ae86124c36821344a0dcc50bb843a81a110beb0c2940bad25fd1fc1679e442b8be0aedc8f8fedbd34145adf4b6d3e1cab91d88c5bc2fa1e969e1d71060420f30f57545215671888d8074e7ef8f192f16b3d344b91f6e3fd83532a4094f386432eb27added390f1e6f907b60056095a1a811cd7a70c5ca1645cbe0b212c0d4f04c7a4ec14a9c7b5c9a4e7a2112960d19936c247d9d15a043dbf3b4006c4122e1f0abd347f1eef092a891febbd5d8ed785777933b75dea34f3ce8416180a000000e201000000000000c593936fa72c57811543a377249ccf8e930f3b74036772a935b5ef5164416c22098a5b38d0915cbf31ec277e212136e3318b49bf16fe23bf5e57df9a138084c601000000a36f7a3fcaa31639fa1de4e9340a728b606ea769b89403399127030df1a036216267c0c710c65477c42f56e98f68002f795bf7cb3c30bfee7f81049dc7d9581ac28c81432d0b083576971fce01f4c40ae5ee7acd9a1c53bdcf980b6b4badfc2a98d525f54bc4803ce585b9266a62783f6ab5fd0562b38ad05ca8e00338f44e030a7c623370149f5bc0689c8ad5e6a0dd2006899f2dfaea834f4fb906d0bb2908f17bb7e0a34b0edfba1e5188c70f11c8f2308b1fca2501c8946d672d850fbf17b423e1daba119931cb528e298790b1c46546b760c6293ff5cbffbc33224e1b029582ba3426a0e01eb7abc4fbdb459bf10b5ae51d111d07f83810e63db429190b283f4c8319bad425baf564ca236a5674c602e0577ac87ef9c2e6a9af6448c40771ef2e39619ee39cb62860541031e1dc9d01fd88ff877504751ce6c4a2490e063b4ceaac015e155eafabdaef755fc8223f8c0dbc839a57736233c4cc89d83f763ff1751cfab0f43a03d4cce60f34456261664a4cae5f45a8c725e2e9b8841e4b0000000016000000011431737420436f6e7472696275746f72204e616d65"));
        let mut r1cs_bytes =  Cursor::new(hex!("7231637301000000030000000200000078000000000000000100000002000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430010000000300000001000000000000000000000000000000000000000000000000000000000000000100000001000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e643001000000400000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000100000000000000020000000400000000000000010000000300000020000000000000000000000000000000010000000000000002000000000000000300000000000000"));
        let witness = Witness::<ark_bn254::Fr>::from_reader(&mut witness_bytes).unwrap();
        let (pk, _) = ZKey::<Bn254>::from_reader(&mut zkey_bytes).unwrap().split();
        let r1cs = R1CS::<Bn254>::from_reader(&mut r1cs_bytes).unwrap();
        let circuit = Circuit::new(r1cs, witness);
        let public_inputs = circuit.public_inputs();
        let mut rng = thread_rng();
        let r = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let s = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let proof =
            Groth16::<Bn254, CircomReduction>::create_proof_with_reduction(circuit, &pk, r, s)
                .expect("proof generation works");
        let pvk = prepare_verifying_key(&pk.vk);
        let ser_proof = serde_json::to_string(&JsonProof::<Bn254>::from(proof)).unwrap();
        let der_proof = serde_json::from_str::<JsonProof<Bn254>>(&ser_proof).unwrap();
        let verified = Groth16::<Bn254>::verify_proof(&pvk, &der_proof.into(), &public_inputs)
            .expect("can verify");
        assert!(verified);
    }

    #[test]
    fn verify_circom_proof_bn254() {
        let vk_bytes = hex!("7b0a202270726f746f636f6c223a202267726f74683136222c0a20226375727665223a2022626e313238222c0a20226e5075626c6963223a20312c0a2022766b5f616c7068615f31223a205b0a2020223136383939343232303932343933333830363635343837333639383535383130393835373632393638363038363236343535313233373839393534333235393631303835353038333136393834222c0a2020223131313236353833353134363135313938383337343031383336353035383032333737363538323831303639393639343634333734323436363233383231383834353338343735373430353733222c0a20202231220a205d2c0a2022766b5f626574615f32223a205b0a20205b0a202020223130353037353433343431363332333931373731343434333038313933333738393132393634333533373032303339323435323936363439393239353132383434373139333530373139303631222c0a202020223138323031333232373930363536363638303338353337363031333239303934333136313639353036323932313735363033383035313931373431303134383137343433313834303439323632220a20205d2c0a20205b0a2020202235393730343035313937333238363731303039303135323136333039313533343737373239323932393337383233353435313731303237323530313434323932313939303238333938303036222c0a20202022323037363930363539363732313734323935323635383432343631323236303235333038373633363433313832353734383136333036313737363531303133363032323934393332343039220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f67616d6d615f32223a205b0a20205b0a202020223130383537303436393939303233303537313335393434353730373632323332383239343831333730373536333539353738353138303836393930353139393933323835363535383532373831222c0a202020223131353539373332303332393836333837313037393931303034303231333932323835373833393235383132383631383231313932353330393137343033313531343532333931383035363334220a20205d2c0a20205b0a2020202238343935363533393233313233343331343137363034393733323437343839323732343338343138313930353837323633363030313438373730323830363439333036393538313031393330222c0a2020202234303832333637383735383633343333363831333332323033343033313435343335353638333136383531333237353933343031323038313035373431303736323134313230303933353331220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f64656c74615f32223a205b0a20205b0a202020223136313535363335353730373539303739353339313238333338383434343936313136303732363437373938383634303030323333363837333033363537393032373137373736313538393939222c0a20202022313436373232343732333439323938303131363833343434353438363934333135383230363734303930393138303935303936303031383536393336373331333235363031353836313130220a20205d2c0a20205b0a2020202237323230353537363739373539343133323030383936393138313930363235393336303436303137313539363138373234353934313136393539343830393338373134323531393238383530222c0a2020202233373430373431373935343430343931323335393434383131383135393034313132323532333136363139363338313232393738313434363732343938373730343432393130303235383834220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f616c706861626574615f3132223a205b0a20205b0a2020205b0a20202020223136353338373835373931393736333638393936303238353733303031303437343934323739393731393539363734393736343030333735393038303032343439383032313131313634323130222c0a20202020223137333131303939343030313735383134333834313632323434393931333130383838303638353634333233373031303334313530393136373439383733363031333732303830333636353435220a2020205d2c0a2020205b0a202020202236313930333734323631323833353139303832363032393734393037373739373133333533393036343136303038373536323431383136383330323736303830353538343937363231343838222c0a202020202235393436343937393339393735333233313331353539363039383430333334353032393437323239343434303530383338333937383834313336323631353232343535303639393334313432220a2020205d2c0a2020205b0a20202020223138363630383932323137313138363030363234323531383138313230343435383939393433393433373835363336363033333539343833303731393937333936343236333032353737353730222c0a20202020223138353331363837333330303731303131333737383735343831373030333131303831353638333936313233343335343330323135343534393932313935383533353738333635333934333838220a2020205d0a20205d2c0a20205b0a2020205b0a202020202235343736313237323838343430373734343530383634383539343637313831363436303634373634393935393639323930363035373138313334363736303830353033323731323636373331222c0a202020202233333939353634373234363732323331323632333637383338383035393433343033383036323930363533333636363534393431333132363133383134303232333039353137303335303433220a2020205d2c0a2020205b0a202020202234363732373031363933363638333233313835393434393830363234343234393230393733323433363333383336383934373333373836313237313831383036363435373334393236333232222c0a202020202237343032393237303636353837353830383934393039323235323334373237333737373736313330373331343839343832303238383637363639323038393134383138303237323934393339220a2020205d2c0a2020205b0a20202020223131333435373137303337333630323238323539333037343535363132323231353530323834333834383633323633393638353634373039353435303731383731353431323432363231313530222c0a20202020223133303237353334363430383439333930393135323635373030373135393438313838303033383238353036393239373636323338313237373735323234303034343030393436323533373836220a2020205d0a20205d0a205d2c0a20224943223a205b0a20205b0a202020223137303634303536353134323130313738323639363231323937313530313736373930393435363639373834363433373331323337393439313836353033353639373031313131383435363633222c0a2020202235313630373731383537313732353437303137333130323436393731393631393837313830383732303238333438303737353731323437373437333239313730373638363834333330303532222c0a2020202231220a20205d2c0a20205b0a202020223139353437353336353037353838333635333434373738373233333236353837343535383436373930363432313539383837323631313237383933373330343639353332353133353338383832222c0a202020223130373337343135353934343631393933353037313533383636383934383132363337343332383430333637353632393133393337393230323434373039343238353536323236353030383435222c0a2020202231220a20205d0a205d0a7d");
        let public_bytes = hex!("5b0a20223333220a5d");
        let proof_bytes = hex!("7b0a202020202270695f61223a205b0a20202020202020202235393639313233353232303930383134333631313731353838323238323239333638333332373139363937393839313435393139333131333239393839323032333031303531373936393132222c0a2020202020202020223138393036323636323733383833343231353338353530353435383730333839373630303238323332363432393933373839303436343335353438373539393538303437353133383236343636222c0a20202020202020202231220a202020205d2c0a202020202270695f62223a205b0a20202020202020205b0a202020202020202020202020223133373332383232373534363835323136363939343934333133313330333037393439333134333538333531323634333931363135303236363537363431383737343539333132383035393231222c0a202020202020202020202020223135323432313535383638313334303531303631353139363137393130383334373538363831323133363232333935373637353635323333323031373135343934313633333832303832363331220a20202020202020205d2c0a20202020202020205b0a2020202020202020202020202236303430393838333033393130313739313337393035323237353030343736363932353232373331353436333831343539313932313737323632313935383330313539323735363836393330222c0a2020202020202020202020202236313032393331333130303531343235343832313132323232353436393430303231373233323634323933373234313338333735373439313431373137303237373934383738303034313136220a20202020202020205d2c0a20202020202020205b0a2020202020202020202020202231222c0a2020202020202020202020202230220a20202020202020205d0a202020205d2c0a202020202270695f63223a205b0a20202020202020202238303237343338333430383035313030383233353033393735383530353134323930333931323630303835363035363437383537333333323536333035323134323436373133393837333937222c0a2020202020202020223137333638333534303832333837373936323436393738343933303632363834333639353836303830303739353138383838373934363234383336393730393933373038383330363834323935222c0a20202020202020202231220a202020205d2c0a202020202270726f746f636f6c223a202267726f74683136222c0a20202020226375727665223a2022626e313238220a7d");

        let vk = serde_json::from_str::<JsonVerificationKey<Bn254>>(
            &String::from_utf8(vk_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let public_input = serde_json::from_str::<JsonPublicInput<ark_bn254::Fr>>(
            &String::from_utf8(public_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let proof = serde_json::from_str::<JsonProof<Bn254>>(
            &String::from_utf8(proof_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let pvk = vk.prepare_verifying_key();
        let verified = Groth16::<Bn254>::verify_proof(&pvk, &proof.into(), &public_input.values)
            .expect("can verify");
        assert!(verified)
    }

    #[test]
    fn verify_circom_proof_bls12_381() {
        let vk_bytes = hex!("");
        let public_bytes = hex!("5b0a20223333220a5d");
        let proof_bytes = hex!("7b0a202270695f61223a205b0a20202233313631393038393739363739393236373735313238363830393434363739303731353338373435363638303032373539303334363436313331353333313336333533303634393534303035323037323534333138363638363434343536323834313733343639383035393638373630323734222c0a202022393433353332353933383236323532353939373337383037323030323439343736353333333539393237393731343930353338393631383538313439313233323032303831343031383731353430373037313036363536303436313330393538333338363233393435363633363236313836222c0a20202231220a205d2c0a202270695f62223a205b0a20205b0a202020223835373432353439333435383839383933333434333331383432393934363430373934313132303734353834353136333139373533383135303035313035393031393433333730363839303330313638383331393134353438313038353731363335353735303339393234343737343136222c0a2020202232303633333039373134313337363734363730303036393339343839373837373735383634323539393931363735323837333837333937313839373231333335343436333833363430373732363338383436323935383930333636363831383137333639393630383936313931383035323335220a20205d2c0a20205b0a2020202233303533313438303034353539333530373637393433303532313336353530313431383837323033393934363031373239373534353436343235373234323039373933373933353339393238363839353138393833313438343536343530353536323132383034353534393939333538353131222c0a2020202231353831363236333834393638353739393336383933373433363238343331313131373533353831333639323637353831333833373538313231303732383438333336303033383532313233333134363536393734313032363535303336393931383331343638363635393631343339353432220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a202270695f63223a205b0a20202232383131333035333435323935373831383137333438353239363931353232313234333932393730303039303234383439393533343336353933383838363937303630303638373939363430343739333934303837323136393734393030363734383835363831313137333933313833383237222c0a202022333937383732313131353039323233323431343530323938303832313231353438313939393731343533333537313832373832333938393935383536313432313835313135373639323937353536323038393536353732303830353938343938373736393533393639373838333633323531222c0a20202231220a205d2c0a202270726f746f636f6c223a202267726f74683136222c0a20226375727665223a2022626c733132333831220a7d");

        let vk = serde_json::from_str::<JsonVerificationKey<Bls12_381>>(
            &String::from_utf8(vk_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let public_input = serde_json::from_str::<JsonPublicInput<ark_bls12_381::Fr>>(
            &String::from_utf8(public_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let proof = serde_json::from_str::<JsonProof<Bls12_381>>(
            &String::from_utf8(proof_bytes.to_vec()).unwrap(),
        )
        .unwrap();
        let pvk = vk.prepare_verifying_key();
        let verified =
            Groth16::<Bls12_381>::verify_proof(&pvk, &proof.into(), &public_input.values)
                .expect("can verify");
        assert!(verified)
    }

    //this does not work. See https://github.com/TaceoLabs/collaborative-circom/issues/10
    #[ignore]
    #[test]
    fn proof_circom_proof_bls12_381() {
        let mut zkey_bytes = Cursor::new(hex!(""));
        let mut witness_bytes = Cursor::new(hex!("77746e7302000000020000000100000028000000000000002000000001000000fffffffffe5bfeff02a4bd5305d8a10908d83933487d9d2953a7ed73040000000200000080000000000000000100000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000"));
        let mut r1cs_bytes = Cursor::new(hex!("723163730100000003000000020000007800000000000000010000000200000000000000fffffffffe5bfeff02a4bd5305d8a10908d83933487d9d2953a7ed7301000000030000000100000000000000000000000000000000000000000000000000000000000000010000000100000000000000fffffffffe5bfeff02a4bd5305d8a10908d83933487d9d2953a7ed730100000040000000000000002000000001000000fffffffffe5bfeff02a4bd5305d8a10908d83933487d9d2953a7ed73040000000100000000000000020000000400000000000000010000000300000020000000000000000000000000000000010000000000000002000000000000000300000000000000"));
        let witness = Witness::<ark_bls12_381::Fr>::from_reader(&mut witness_bytes).unwrap();
        let (pk, _) = ZKey::<Bls12_381>::from_reader(&mut zkey_bytes)
            .unwrap()
            .split();
        let r1cs = R1CS::<Bls12_381>::from_reader(&mut r1cs_bytes).unwrap();
        let circuit = Circuit::new(r1cs, witness);
        let public_inputs = circuit.public_inputs();
        let mut rng = thread_rng();
        let r = <Bls12_381 as Pairing>::ScalarField::rand(&mut rng);
        let s = <Bls12_381 as Pairing>::ScalarField::rand(&mut rng);
        let proof = Groth16::<Bls12_381>::create_proof_with_reduction(circuit, &pk, r, s)
            .expect("proof generation works");
        let pvk = prepare_verifying_key(&pk.vk);
        let verified =
            Groth16::<Bls12_381>::verify_proof(&pvk, &proof, &public_inputs).expect("can verify");
        assert!(verified);
        let ser_proof = serde_json::to_string(&JsonProof::<Bls12_381>::from(proof)).unwrap();
        //fs::write(Path::new("my_cool_proof1.json"), test.clone()).unwrap();
        let der_proof = serde_json::from_str::<JsonProof<Bls12_381>>(&ser_proof).unwrap();
        let verified = Groth16::<Bls12_381>::verify_proof(&pvk, &der_proof.into(), &public_inputs)
            .expect("can verify");
        assert!(verified)
    }

    #[test]
    fn proof_circom_proof_bn254() {
        let mut zkey_bytes = Cursor::new(hex!("7a6b6579010000000a000000010000000400000000000000010000000200000094020000000000002000000047fd7cd8168c203c8dca7168916a81975d588181b64550b829a031e1724e643020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000100000004000000027e9fb2cb94e617cd71cc2ef8637b40ead6441b089d8ba88f60ce98e87c9117146737fd7cd8fa501f67b70ac52838cc6a7c08099a814e45430874985fd1a80e0ec211c22c964bd5cd445e61a0bfac6d353eb2f0d860e3f86b05ea912ed3b32eaf3045d1d5305dbe0f0b415ec9fd5ce45572436831d88cb4ed7d8844be0b90139a9d12878646b78d32cc7d394c7f446e5bee9bad78cc38233db3e5ef554a952701c8300b58a5338cf86354145f3b8c8cecb394c9b102d8289a70d81df6bcfd2ad8bd985423ab08ee87af16e135869c16024ad30a16b697bafa1e73820d8da81765c28f93acbc9d19014db813ee2433245e24e6f56e7bba1353ea2f7afdb5520c2620bc02d1b5838e72017b493519ebdcdf1a81974726b8fb3b5096af4138571940614ca87d73b4afc4d802585add4360862fa052fc50e9096b7bea3a83f0fe14f6e96b889dfa9d61789b9ef597d27ffefe7d1b23621a9eff06429eaeeb7efd28ee5618c7565b0964bb3c7d3222f957dc76103533be35f9558264fd93e6a0a40d4cc19c40b7d561175b65dc98b92614ddd285a11be8e03cf18267321d5e0a62191f51760b48b5773f5680c494f84f59957624c022fa1facffc2dcaa565bddf109b494d100145a1962f8c1018a7e66ded58529e19446efbc393847ba842881c025d8b2c85bcb10e71ba9c8c31120fae71fa5ed983349384f30519a2c7949d8280a5cb12f9b189bce1c74d03018778c614e09d04905cfeada5e992cbb5d7619202cd49b35b903bf71ec6da3df34317b64ee08c336be712a25696eaa847e990f8929030000008000000000000000bc6933dd9846cd05a4d9641a37bbeb13db86b46015b1f78ba12cbf7296f4f11b44e263a510cd1612aefce8f063b0f8ee0790808e5ca6c53124371d9911feff0544a00e55c32c632390a35e20d1ad882b25f434917da80cdbb1e5cb40b688d72b1fcd57dcf9a06192523cde9efc0bc8f90a8b683ba855e13eed86e89211ba5d1404000000b400000000000000040000000000000000000000020000005a92de414e0f2928ae165d9696ad35d4d7d7c52d79c2062c845be361c17d4d2e010000000000000003000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000100000000000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602000000000200000001000000a76d21ae45e6b81be3595ce3b13afe538580bb533d83498ca5444e7fb1d01602050000000001000000000000376ae13e3ec67daf95c78bf929ac32038b9ab751cb5038b1b1c1741cb9cd7b0fcd938d847229faea26b8296a5bcfb5f2395ce66521af09041dcd87a04c9ab521c2ada80dd6091a02f6a373cd8b25404cdb9948044d2b7895a8701ae396dc552ba15dc7bbb2f9d1d45fa2e9073ce6a5e2360d2b0483006ffb50cf3b0757a351303c786effb730f67d404dc88dfd98e3c73045ed6408c318b8f23038db3c2910214aee016adb9f87bd61029e253fed08f753740565a93f322c0179a8e2f06aecc786effb730f67d404dc88dfd98e3c73045ed6408c318b8f23038db3c291021fd0e7b6e3bec987e2bc8d342527d78a009e47b1c0d061e8c282789fe81e3772ffe547c275b0fc7c3358bb1ee15f4c209584d7e30e4469a9a7265cde271c68d3a5ea5fb2a392c820f4fe7a4b49a75882bf30b56c9d992cf8154c4536dc17cd186b9211092e366e4a038ea9e2331b27f36844dd12fd89359b26cc79471c0da960f490a7467661d530e69c95a538279434a80aec7d6a5bb9ce58538de50807080000008000000000000000454ee619c4f07b4f111a00adbed1265da783bbbf28bc57ee8d60a2915e991401819dc403af67a1efef7024e3b151749cae633e6a582a3bb89bbb4d8e75afef021ae3567ce80d2c00c8e41fcc470b2adee059f1e650982ba5a989b4d8153d270f1ce6b90463d2ef2c6b6a4d95925c25e5e23bf9e6bb6ea43b5aa1ae9dce997e01090000000001000000000000c4e3ec12c510235d6e263f1e7367ee81bb50ef0878e00d669e4d40ac4a490e11e8dc6bb0c90c78f2ebdf46dfbd289e45f74aa72e78e8ec4baaf94420d1fca60b05058fea6355ba4c984f982a05229a9b93f5971437bae66327322914691b4d09d2a84b7926593ae93901f537a13c49d3d1b4f37324c975139c2051e72a23e3240cce6f0675357bcb0a1d5b0c427be3cb4d75eabd17b15ec94bf1ef95b7a82608d0c44e2989b56784f1eb375ebc88d3ba0ef3ce02d6220934ee14a1eb2281102e721b3014e1de6672d2b2cfbd51b11a42ed0bd72356ed19b9ec61d89756da120de089f5c570aaa74bfc59e4ec4f4c6ab4fc130843b01e98f14897b5ebd8aeaf1f0a000000e201000000000000d18d78a175674762ef69537202f163bcf68ad4365446b60a60163c70f08ce738765a4f0ace202dfbc7a59bc908857bf231f2c0c28e43ee6afcd2c704b7d89a99010000004cc19c40b7d561175b65dc98b92614ddd285a11be8e03cf18267321d5e0a62191f51760b48b5773f5680c494f84f59957624c022fa1facffc2dcaa565bddf109fe9539180b6c662f98b6e0fb8a2b89e07534cb916139e428e8be431f6e80711cf8565e631fde06d56e1c4d5250ca6e3b7bb53cd34aa1d787f2e9a99634e26d244c00c34128f4acbe221686fe7b8e31c4473bed6c58fa102ac525629d7d65ea03308fc340098bc56c78eadb551956d1f66af693232bbc75df6bf474c9080da304669467aa327905ef72a039f2031c8f5383d4eec8b1f41be855b8b155504b0e1fb6dd5be0376bec9a1846e496d3ba706913a5409f61bc45929e3fcf3b18c343155643da8c44e0027c5646cb0d2383edc3a1c92e9546d24ff5a346c145ff11342134b337402c210cf58f28a437986b81f1353b0b82fbbb1fcdfd2108ef3e5d6010d45a7de7ab09c65f85d663194d0ba3af7f3af53e28dcf85929878393e282ac7fb12991cdee39319bdd15c5fe3cbe1cfe99b70826fa87806a2a47fdae59a5dc9f0000000016000000011431737420436f6e7472696275746f72204e616d65"));
        let mut witness_bytes = Cursor::new(hex!("77746e73020000000200000001000000280000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000200000080000000000000000100000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000"));
        let mut r1cs_bytes = Cursor::new(hex!("7231637301000000030000000200000078000000000000000100000002000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430010000000300000001000000000000000000000000000000000000000000000000000000000000000100000001000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e643001000000400000000000000020000000010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430040000000100000000000000020000000400000000000000010000000300000020000000000000000000000000000000010000000000000002000000000000000300000000000000"));
        let witness = Witness::<ark_bn254::Fr>::from_reader(&mut witness_bytes).unwrap();
        let (pk, _) = ZKey::<Bn254>::from_reader(&mut zkey_bytes).unwrap().split();
        let r1cs = R1CS::<Bn254>::from_reader(&mut r1cs_bytes).unwrap();
        let circuit = Circuit::new(r1cs, witness);
        let public_inputs = circuit.public_inputs();
        let mut rng = thread_rng();
        let r = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let s = <Bn254 as Pairing>::ScalarField::rand(&mut rng);
        let proof =
            Groth16::<Bn254, CircomReduction>::create_proof_with_reduction(circuit, &pk, r, s)
                .expect("proof generation works");
        let pvk = prepare_verifying_key(&pk.vk);
        let verified =
            Groth16::<Bn254>::verify_proof(&pvk, &proof, &public_inputs).expect("can verify");
        assert!(verified);
        let ser_proof = serde_json::to_string(&JsonProof::<Bn254>::from(proof)).unwrap();
        //fs::write(Path::new("my_cool_proof1.json"), test.clone()).unwrap();
        let der_proof = serde_json::from_str::<JsonProof<Bn254>>(&ser_proof).unwrap();
        let verified = Groth16::<Bn254>::verify_proof(&pvk, &der_proof.into(), &public_inputs)
            .expect("can verify");
        assert!(verified);
    }
}
