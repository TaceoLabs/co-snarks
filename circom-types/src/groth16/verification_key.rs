use std::marker::PhantomData;

use ark_ec::pairing::Pairing;
use ark_ec::AffineRepr;
use ark_ec::CurveGroup;
use ark_groth16::{PreparedVerifyingKey, VerifyingKey};
use serde::ser::SerializeSeq;
use serde::{
    de::{self},
    Deserialize, Serialize, Serializer,
};

use crate::traits::{CircomArkworksPairingBridge, CircomArkworksPrimeFieldBridge};
use core::ops::Neg;

#[derive(Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct JsonVerificationKey<P: Pairing + CircomArkworksPairingBridge>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    pub protocol: String,
    #[serde(rename = "nPublic")]
    pub n_public: usize,
    #[serde(rename = "vk_alpha_1")]
    #[serde(serialize_with = "P::serialize_g1::<_>")]
    #[serde(deserialize_with = "P::deserialize_g1_element::<_>")]
    alpha_1: P::G1Affine,
    #[serde(rename = "vk_beta_2")]
    #[serde(serialize_with = "P::serialize_g2::<_>")]
    #[serde(deserialize_with = "P::deserialize_g2_element::<_>")]
    beta_2: P::G2Affine,
    #[serde(rename = "vk_gamma_2")]
    #[serde(serialize_with = "P::serialize_g2::<_>")]
    #[serde(deserialize_with = "P::deserialize_g2_element::<_>")]
    gamma_2: P::G2Affine,
    #[serde(rename = "vk_delta_2")]
    #[serde(serialize_with = "P::serialize_g2::<_>")]
    #[serde(deserialize_with = "P::deserialize_g2_element::<_>")]
    delta_2: P::G2Affine,
    #[serde(rename = "vk_alphabeta_12")]
    #[serde(serialize_with = "P::serialize_gt::<_>")]
    #[serde(deserialize_with = "P::deserialize_gt_element::<_>")]
    alpha_beta_gt: P::TargetField,
    #[serde(rename = "IC")]
    #[serde(serialize_with = "serialize_g1_sequence::<_,P>")]
    #[serde(deserialize_with = "deserialize_g1_sequence::<_,P>")]
    ic: Vec<P::G1Affine>,
}

fn serialize_g1_sequence<S: Serializer, P: Pairing + CircomArkworksPairingBridge>(
    p: &[P::G1Affine],
    ser: S,
) -> Result<S::Ok, S::Error>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    let mut seq = ser.serialize_seq(Some(p.len())).unwrap();
    let maybe_error = p
        .iter()
        .map(|p| P::g1_to_strings_projective(p))
        .map(|strings| seq.serialize_element(&strings))
        .find(|r| r.is_err());
    if let Some(Err(err)) = maybe_error {
        Err(err)
    } else {
        seq.end()
    }
}

fn deserialize_g1_sequence<'de, D, P: Pairing + CircomArkworksPairingBridge>(
    deserializer: D,
) -> Result<Vec<P::G1Affine>, D::Error>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
    D: de::Deserializer<'de>,
{
    deserializer.deserialize_seq(G1SeqVisitor::<P>::new())
}
struct G1SeqVisitor<P: Pairing + CircomArkworksPairingBridge>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    phantom_data: PhantomData<P>,
}

impl<P: Pairing + CircomArkworksPairingBridge> G1SeqVisitor<P>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    fn new() -> Self {
        Self {
            phantom_data: PhantomData,
        }
    }
}

impl<'de, P: Pairing + CircomArkworksPairingBridge> de::Visitor<'de> for G1SeqVisitor<P>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    type Value = Vec<P::G1Affine>;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.write_str(
            "a sequence of elements representing 
        projective points on G1, which in turn are seqeunces of three
         elements on the BaseField of the Curve.",
        )
    }

    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
    where
        A: de::SeqAccess<'de>,
    {
        let mut values = vec![];
        while let Some(point) = seq.next_element::<Vec<String>>()? {
            //check if there are no more elements
            if point.len() != 3 {
                return Err(de::Error::invalid_length(point.len(), &self));
            } else {
                values.push(
                    P::g1_from_strings_projective(&point[0], &point[1], &point[2]).map_err(
                        |_| de::Error::custom("Invalid projective point on G1.".to_owned()),
                    )?,
                );
            }
        }
        Ok(values)
    }
}

impl<P: Pairing + CircomArkworksPairingBridge> From<PreparedVerifyingKey<P>>
    for JsonVerificationKey<P>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    fn from(value: PreparedVerifyingKey<P>) -> Self {
        let vk = value.vk;
        Self {
            n_public: 1, //how to learn this???
            alpha_1: vk.alpha_g1,
            beta_2: vk.beta_g2,
            gamma_2: vk.gamma_g2,
            delta_2: vk.delta_g2,
            alpha_beta_gt: value.alpha_g1_beta_g2,
            ic: vk.gamma_abc_g1,
            protocol: "groth16".to_owned(),
        }
    }
}

impl<P: Pairing + CircomArkworksPairingBridge> From<JsonVerificationKey<P>>
    for PreparedVerifyingKey<P>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    fn from(json_key: JsonVerificationKey<P>) -> Self {
        Self {
            vk: VerifyingKey::<P> {
                alpha_g1: json_key.alpha_1,
                beta_g2: json_key.beta_2,
                gamma_g2: json_key.gamma_2,
                delta_g2: json_key.delta_2,
                gamma_abc_g1: json_key.ic,
            },
            alpha_g1_beta_g2: json_key.alpha_beta_gt,
            gamma_g2_neg_pc: json_key.gamma_2.into_group().neg().into_affine().into(),
            delta_g2_neg_pc: json_key.delta_2.into_group().neg().into_affine().into(),
        }
    }
}

impl<P: Pairing + CircomArkworksPairingBridge> JsonVerificationKey<P>
where
    P::BaseField: CircomArkworksPrimeFieldBridge,
    P::ScalarField: CircomArkworksPrimeFieldBridge,
{
    pub fn prepare_verifying_key(self) -> PreparedVerifyingKey<P> {
        PreparedVerifyingKey::<P>::from(self)
    }
}

#[cfg(test)]
mod test {
    use ark_bls12_381::Bls12_381;
    use ark_bn254::Bn254;
    use ark_ec::pairing::Pairing;
    use hex_literal::hex;

    use crate::groth16::test_utils;

    use super::JsonVerificationKey;
    use std::str::FromStr;

    #[test]
    fn can_serde_vk_bn254() {
        let vk_bytes = hex!("7b0a202270726f746f636f6c223a202267726f74683136222c0a20226375727665223a2022626e313238222c0a20226e5075626c6963223a20312c0a2022766b5f616c7068615f31223a205b0a2020223136383939343232303932343933333830363635343837333639383535383130393835373632393638363038363236343535313233373839393534333235393631303835353038333136393834222c0a2020223131313236353833353134363135313938383337343031383336353035383032333737363538323831303639393639343634333734323436363233383231383834353338343735373430353733222c0a20202231220a205d2c0a2022766b5f626574615f32223a205b0a20205b0a202020223130353037353433343431363332333931373731343434333038313933333738393132393634333533373032303339323435323936363439393239353132383434373139333530373139303631222c0a202020223138323031333232373930363536363638303338353337363031333239303934333136313639353036323932313735363033383035313931373431303134383137343433313834303439323632220a20205d2c0a20205b0a2020202235393730343035313937333238363731303039303135323136333039313533343737373239323932393337383233353435313731303237323530313434323932313939303238333938303036222c0a20202022323037363930363539363732313734323935323635383432343631323236303235333038373633363433313832353734383136333036313737363531303133363032323934393332343039220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f67616d6d615f32223a205b0a20205b0a202020223130383537303436393939303233303537313335393434353730373632323332383239343831333730373536333539353738353138303836393930353139393933323835363535383532373831222c0a202020223131353539373332303332393836333837313037393931303034303231333932323835373833393235383132383631383231313932353330393137343033313531343532333931383035363334220a20205d2c0a20205b0a2020202238343935363533393233313233343331343137363034393733323437343839323732343338343138313930353837323633363030313438373730323830363439333036393538313031393330222c0a2020202234303832333637383735383633343333363831333332323033343033313435343335353638333136383531333237353933343031323038313035373431303736323134313230303933353331220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f64656c74615f32223a205b0a20205b0a202020223136313535363335353730373539303739353339313238333338383434343936313136303732363437373938383634303030323333363837333033363537393032373137373736313538393939222c0a20202022313436373232343732333439323938303131363833343434353438363934333135383230363734303930393138303935303936303031383536393336373331333235363031353836313130220a20205d2c0a20205b0a2020202237323230353537363739373539343133323030383936393138313930363235393336303436303137313539363138373234353934313136393539343830393338373134323531393238383530222c0a2020202233373430373431373935343430343931323335393434383131383135393034313132323532333136363139363338313232393738313434363732343938373730343432393130303235383834220a20205d2c0a20205b0a2020202231222c0a2020202230220a20205d0a205d2c0a2022766b5f616c706861626574615f3132223a205b0a20205b0a2020205b0a20202020223136353338373835373931393736333638393936303238353733303031303437343934323739393731393539363734393736343030333735393038303032343439383032313131313634323130222c0a20202020223137333131303939343030313735383134333834313632323434393931333130383838303638353634333233373031303334313530393136373439383733363031333732303830333636353435220a2020205d2c0a2020205b0a202020202236313930333734323631323833353139303832363032393734393037373739373133333533393036343136303038373536323431383136383330323736303830353538343937363231343838222c0a202020202235393436343937393339393735333233313331353539363039383430333334353032393437323239343434303530383338333937383834313336323631353232343535303639393334313432220a2020205d2c0a2020205b0a20202020223138363630383932323137313138363030363234323531383138313230343435383939393433393433373835363336363033333539343833303731393937333936343236333032353737353730222c0a20202020223138353331363837333330303731303131333737383735343831373030333131303831353638333936313233343335343330323135343534393932313935383533353738333635333934333838220a2020205d0a20205d2c0a20205b0a2020205b0a202020202235343736313237323838343430373734343530383634383539343637313831363436303634373634393935393639323930363035373138313334363736303830353033323731323636373331222c0a202020202233333939353634373234363732323331323632333637383338383035393433343033383036323930363533333636363534393431333132363133383134303232333039353137303335303433220a2020205d2c0a2020205b0a202020202234363732373031363933363638333233313835393434393830363234343234393230393733323433363333383336383934373333373836313237313831383036363435373334393236333232222c0a202020202237343032393237303636353837353830383934393039323235323334373237333737373736313330373331343839343832303238383637363639323038393134383138303237323934393339220a2020205d2c0a2020205b0a20202020223131333435373137303337333630323238323539333037343535363132323231353530323834333834383633323633393638353634373039353435303731383731353431323432363231313530222c0a20202020223133303237353334363430383439333930393135323635373030373135393438313838303033383238353036393239373636323338313237373735323234303034343030393436323533373836220a2020205d0a20205d0a205d2c0a20224943223a205b0a20205b0a202020223137303634303536353134323130313738323639363231323937313530313736373930393435363639373834363433373331323337393439313836353033353639373031313131383435363633222c0a2020202235313630373731383537313732353437303137333130323436393731393631393837313830383732303238333438303737353731323437373437333239313730373638363834333330303532222c0a2020202231220a20205d2c0a20205b0a202020223139353437353336353037353838333635333434373738373233333236353837343535383436373930363432313539383837323631313237383933373330343639353332353133353338383832222c0a202020223130373337343135353934343631393933353037313533383636383934383132363337343332383430333637353632393133393337393230323434373039343238353536323236353030383435222c0a2020202231220a20205d0a205d0a7d");
        let vk_string = String::from_utf8(vk_bytes.to_vec()).unwrap();
        let vk = serde_json::from_str::<JsonVerificationKey<Bn254>>(&vk_string).unwrap();
        let alpha_1 = test_utils::to_g1_bn254!(
            "16899422092493380665487369855810985762968608626455123789954325961085508316984",
            "11126583514615198837401836505802377658281069969464374246623821884538475740573"
        );
        let beta_2 = test_utils::to_g2_bn254!(
            { "10507543441632391771444308193378912964353702039245296649929512844719350719061", "18201322790656668038537601329094316169506292175603805191741014817443184049262"},
            { "5970405197328671009015216309153477729292937823545171027250144292199028398006", "207690659672174295265842461226025308763643182574816306177651013602294932409"}
        );
        let gamma_2 = test_utils::to_g2_bn254!(
            { "10857046999023057135944570762232829481370756359578518086990519993285655852781", "11559732032986387107991004021392285783925812861821192530917403151452391805634"},
            { "8495653923123431417604973247489272438418190587263600148770280649306958101930", "4082367875863433681332203403145435568316851327593401208105741076214120093531"}
        );
        let delta_2 = test_utils::to_g2_bn254!(
            { "16155635570759079539128338844496116072647798864000233687303657902717776158999", "146722472349298011683444548694315820674090918095096001856936731325601586110"},
            { "7220557679759413200896918190625936046017159618724594116959480938714251928850", "3740741795440491235944811815904112252316619638122978144672498770442910025884"}
        );
        let ic = vec![
            test_utils::to_g1_bn254!(
                "17064056514210178269621297150176790945669784643731237949186503569701111845663",
                "5160771857172547017310246971961987180872028348077571247747329170768684330052"
            ),
            test_utils::to_g1_bn254!(
                "19547536507588365344778723326587455846790642159887261127893730469532513538882",
                "10737415594461993507153866894812637432840367562913937920244709428556226500845"
            ),
        ];
        //build the element in the target group
        let alpha_beta_gt = ark_bn254::Fq12::new(
        ark_bn254::Fq6::new(
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("16538785791976368996028573001047494279971959674976400375908002449802111164210").unwrap(),
            ark_bn254::Fq::from_str("17311099400175814384162244991310888068564323701034150916749873601372080366545").unwrap(),
        ),
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("6190374261283519082602974907779713353906416008756241816830276080558497621488").unwrap(),
            ark_bn254::Fq::from_str("5946497939975323131559609840334502947229444050838397884136261522455069934142").unwrap(),
        ),
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("18660892217118600624251818120445899943943785636603359483071997396426302577570").unwrap(),
            ark_bn254::Fq::from_str("18531687330071011377875481700311081568396123435430215454992195853578365394388").unwrap(),
        )),
        ark_bn254::Fq6::new(
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("5476127288440774450864859467181646064764995969290605718134676080503271266731").unwrap(),
            ark_bn254::Fq::from_str("3399564724672231262367838805943403806290653366654941312613814022309517035043").unwrap(),
        ),
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("4672701693668323185944980624424920973243633836894733786127181806645734926322").unwrap(),
            ark_bn254::Fq::from_str("7402927066587580894909225234727377776130731489482028867669208914818027294939").unwrap(),
        ),
        ark_bn254::Fq2::new(
            ark_bn254::Fq::from_str("11345717037360228259307455612221550284384863263968564709545071871541242621150").unwrap(),
            ark_bn254::Fq::from_str("13027534640849390915265700715948188003828506929766238127775224004400946253786").unwrap(),
        )));

        assert_eq!(vk.protocol, "groth16");
        assert_eq!(vk.n_public, 1);
        assert_eq!(vk.alpha_1, alpha_1);
        assert_eq!(vk.beta_2, beta_2);
        assert_eq!(vk.gamma_2, gamma_2);
        assert_eq!(vk.delta_2, delta_2);
        assert_eq!(vk.alpha_beta_gt, alpha_beta_gt);
        assert_eq!(vk.ic, ic);

        let ser_vk = serde_json::to_string(&vk).unwrap();
        let der_vk = serde_json::from_str::<JsonVerificationKey<Bn254>>(&ser_vk).unwrap();
        assert_eq!(der_vk, vk);
    }

    #[test]
    fn can_serde_vk_bls12_381() {
        let vk_bytes = hex!("");
        let vk_string = String::from_utf8(vk_bytes.to_vec()).unwrap();
        let vk = serde_json::from_str::<JsonVerificationKey<Bls12_381>>(&vk_string).unwrap();
        let alpha_1 = test_utils::to_g1_bls12_381!(
            "1006274644424409217186953213662503172434575368717179668374437354164299156533023899663544377042948523039106817870257",
            "1056550161284843386841851874013894300183177686460359778532448293436751746312447247913808276245741832724930728476526"
        );
        let beta_2 = test_utils::to_g2_bls12_381!(
            { "3833290875431013323062530478493530418968389153270439753829063257458623453461561795554297289256242122137266954062295", "2228117692250510301392216006578948043594029389519653120062719996832142506700092357578079263683164163924336049094915"},
            { "2239366679955912352262542791898598086155873390998098510086037278986752535371878857599163683200125604962837774856145", "3424627907649077420232688844078275395998719638992940625343328599614593201412881339495541466557865160709666604131438"}
        );
        let gamma_2 = test_utils::to_g2_bls12_381!(
            { "352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160", "3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758"},
            { "1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905", "927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"}
        );
        let delta_2 = test_utils::to_g2_bls12_381!(
            { "407283034676191828394615292491615868521697501403569316394352959421232304452252225405687605369694866481449170561127", "1916310290135728228111042918457706755180843525757258989391918328848764641281205237939637145938907805690848641923870"},
            { "773220331199800641076428580097194510928479849961841626173884910801812589228121209118641713073715764746810093487066", "842139937243481099227693813875901684226562411038967434221031340713350500808075916468091174861623414800092800698492"}
        );
        let ic = vec![
            test_utils::to_g1_bls12_381!("1495026532898515620469577696845787397974195382948513706110048251507786092667423164714014110327294560434168043450964", "1265314875542003637362702953597715823307674187372364159978688398350561983587011928684022513712198594921110529956046"),
            test_utils::to_g1_bls12_381!("777468538140426271424529094657337215335578494839835150872699847044084179692930552100250347883471985898700200932803", "2922638943052571768310240714689471196602837016420790391524646033812246018420763234713405738236179611794749095521486"),

        ];
        //build the element in the target group
        let alpha_beta_gt = ark_bls12_381::Fq12::new(
        ark_bls12_381::Fq6::new(
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("245953587653747364661272996601367517819599136333537896751364566894521515741288251670042624819123653508612108920176").unwrap(),
            ark_bls12_381::Fq::from_str("1043495016811974826271064895744558799045638417482036826524608783985042816338812352101618607035139517940603573783892").unwrap(),
        ),
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("1436077403984428712715577715493143380738440840354638763535607114970024818330460046200109908912644404056635481232917").unwrap(),
            ark_bls12_381::Fq::from_str("2830257175595044822889689804353215304269461116847276249711335235260334231408550261007395202110126350678917157333167").unwrap(),
        ),
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("1508754290750078910643170136007034715692777756790015396818460513696413854859616289908355385651830849206992219710332").unwrap(),
            ark_bls12_381::Fq::from_str("313964845217783156613100981543020398852860585996997395986766332008219117989958253817480932103015746698841120007660").unwrap(),
        )),
        ark_bls12_381::Fq6::new(
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("2395025368126554512383041528696450179551770206855623946498536634596941935350232759007641897980542866101729353037334").unwrap(),
            ark_bls12_381::Fq::from_str("672155520622114343117951403318374335972732248237104144448044619992830327356868811268917651305841771084307320591267").unwrap(),
        ),
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("3598603864633487002300774401458771219600362131474396535229871539610288111910104591375003059125300297421162697844113").unwrap(),
            ark_bls12_381::Fq::from_str("3639609955925134700378752121058019264876307475814452936130142657917747902435857678122697126910962748292392549153095").unwrap(),
        ),
        ark_bls12_381::Fq2::new(
            ark_bls12_381::Fq::from_str("552001153915152500567315522071697673111122326457305118818873061190607796934517550348620797435452644310226360562485").unwrap(),
            ark_bls12_381::Fq::from_str("1274088299258435998313079812684764556026533458463307469668809366079589204850590728652025694366571979534139463158423").unwrap(),
        )));

        assert_eq!(vk.protocol, "groth16");
        assert_eq!(vk.n_public, 1);
        assert_eq!(vk.alpha_1, alpha_1);
        assert_eq!(vk.beta_2, beta_2);
        assert_eq!(vk.gamma_2, gamma_2);
        assert_eq!(vk.delta_2, delta_2);
        assert_eq!(vk.alpha_beta_gt, alpha_beta_gt);
        assert_eq!(vk.ic, ic);

        let ser_vk = serde_json::to_string(&vk).unwrap();
        let der_vk = serde_json::from_str::<JsonVerificationKey<Bls12_381>>(&ser_vk).unwrap();
        assert_eq!(der_vk, vk);
    }
}
