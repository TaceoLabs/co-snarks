{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":12525870661934404163,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"std::cmp::Ordering","fields":[{"name":"result","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Mul, Sub};\nfn main(x: Field, y: pub Field) -> pub Ordering {\n    let new_x = Quantized::new(x);\n    let new_y = Quantized::new(y);\n    let zero = Quantized::zero();\n    let add0 = new_x + zero;\n    let sub = add0 - new_y;\n    let mul = new_x * sub;\n    Quantized::cmp(mul, new_y)\n}\n\npub struct Quantized {\n    // if value positive: x*scale\n    // if negative: (p-x)*scale, where p is the prime of native Field (in this case from barretenberg)\n    // the original value is max 60 bits, positive or negative,\n    // this leaves enough space for additions and additions of single multiplications\n    // 2^60-1 = 1152921504606846975\n    // -1152921504606846975 <= x <= 1152921504606846975\n    // -1152921504606846975/65536 <= value <= 1152921504606846975/65536\n    pub x: Field,\n}\npub unconstrained fn get_bytes(x: Field) -> [u8; 32] {\n    x.to_be_bytes()\n}\n\n/// Check if the integer value is possitive based on the Field value used to\n/// encode it.\npub fn is_positive(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes == 0\n}\n\n// check if there are bytes from 0-15, then it is negative\n// This assumes the values that are multiplied have max ~60-63 bits\npub fn is_negative(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes != 0\n}\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n        let mut bytes: [u8; 32] = [0; 32];\n        // Safety: get_bytes is safe\n        unsafe {\n            bytes = get_bytes(temp);\n        }\n\n        assert(Field::from_be_bytes::<32>(bytes) == temp);\n\n        let negative = is_negative(temp);\n\n        // To correctly scale down we temporary flip the sign\n        if negative {\n            temp = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - temp\n                + 1;\n            // Safety: get_bytes is safe\n            unsafe {\n                bytes = get_bytes(temp);\n            }\n\n            assert(Field::from_be_bytes::<32>(bytes) == temp);\n        }\n\n        // Chop off 2 bytes to scale down by 2^16 and truncate\n        let mut truncated: [u8; 32] = [0; 32];\n        for i in 0..30 {\n            // [0, 0, am, .., a2] (chop off a0 and a1)\n            truncated[i + 2] = bytes[i];\n        }\n\n        let mut new_x: Field = Field::from_be_bytes::<32>(truncated);\n        // Flip back sign if the output is negative\n        if negative {\n            new_x = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - new_x\n                + 1;\n        }\n\n        Quantized { x: new_x }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized { // TODO is it cheaper to create a function that returns a bool directly?\n    fn cmp(self: Self, other: Self) -> Ordering {\n        let self_positive = is_positive(self.x);\n        let other_positive = is_positive(other.x);\n        if self.x == other.x {\n            Ordering::equal()\n        } else if (self_positive & !other_positive) {\n            Ordering::greater()\n        } else if self_positive == other_positive {\n            let self_smallest = self.x.lt(other.x);\n            if self_smallest {\n                Ordering::less()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            Ordering::less()\n        }\n    }\n}\n","path":"/Taceo/product_dev/collaborative-circom/co-noir/co-noir/examples/test_vectors/quantized/src/main.nr"}},"names":["main"],"brillig_names":["get_bytes","decompose_hint","lte_hint","field_less_than","directive_invert"]}
