{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":11088061914096244783,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"std::cmp::Ordering","fields":[{"name":"result","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"62":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Mul, Sub};\nfn main(x: Field, y: pub Field) -> pub Ordering {\n    let new_x = Quantized::new(x);\n    let new_y = Quantized::new(y);\n    let zero = Quantized::zero();\n    let add0 = new_x + zero;\n    let sub = add0 - new_y;\n    let mul = new_x * sub;\n    Quantized::cmp(mul, new_y)\n}\n\npub struct Quantized {\n    // if value positive: x*scale\n    // if negative: (p-x)*scale, where p is the prime of native Field (in this case from barretenberg)\n    // the original value is max 60 bits, positive or negative,\n    // this leaves enough space for additions and additions of single multiplications\n    // 2^60-1 = 1152921504606846975\n    // -1152921504606846975 <= x <= 1152921504606846975\n    // -1152921504606846975/65536 <= value <= 1152921504606846975/65536\n    pub x: Field,\n}\npub unconstrained fn get_bytes(x: Field) -> [u8; 32] {\n    x.to_be_bytes()\n}\n\n/// Check if the integer value is possitive based on the Field value used to\n/// encode it.\npub fn is_positive(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes == 0\n}\n\n// check if there are bytes from 0-15, then it is negative\n// This assumes the values that are multiplied have max ~60-63 bits\npub fn is_negative(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes != 0\n}\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n        let mut bytes: [u8; 32] = [0; 32];\n        ///Safety: get_bytes is safe\n        unsafe {\n            bytes = get_bytes(temp);\n        }\n\n        assert(Field::from_be_bytes::<32>(bytes) == temp);\n\n        let negative = is_negative(temp);\n\n        // To correctly scale down we temporary flip the sign\n        if negative {\n            temp = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - temp\n                + 1;\n            ///Safety: get_bytes is safe\n            unsafe {\n                bytes = get_bytes(temp);\n            }\n\n            assert(Field::from_be_bytes::<32>(bytes) == temp);\n        }\n\n        // Chop off 2 bytes to scale down by 2^16 and truncate\n        let mut truncated: [u8; 32] = [0; 32];\n        for i in 0..30 {\n            // [0, 0, am, .., a2] (chop off a0 and a1)\n            truncated[i + 2] = bytes[i];\n        }\n\n        let mut new_x: Field = Field::from_be_bytes::<32>(truncated);\n        // Flip back sign if the output is negative\n        if negative {\n            new_x = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - new_x\n                + 1;\n        }\n\n        Quantized { x: new_x }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized { // TODO is it cheaper to create a function that returns a bool directly?\n    fn cmp(self: Self, other: Self) -> Ordering {\n        let self_positive = is_positive(self.x);\n        let other_positive = is_positive(other.x);\n        if self.x == other.x {\n            Ordering::equal()\n        } else if (self_positive & !other_positive) {\n            Ordering::greater()\n        } else if self_positive == other_positive {\n            let self_smallest = self.x.lt(other.x);\n            if self_smallest {\n                Ordering::less()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            Ordering::less()\n        }\n    }\n}\n","path":"/Work/Taceo/product_dev/collaborative-circom/co-noir/co-noir/examples/test_vectors/quantized/src/main.nr"}},"names":["main"],"brillig_names":["get_bytes","decompose_hint","lte_hint","field_less_than","directive_invert"]}
