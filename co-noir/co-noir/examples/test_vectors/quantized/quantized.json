{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"6978597327016546794","abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"std::cmp::Ordering","fields":[{"name":"result","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"50":{"source":"use std::cmp::Ordering;\nuse std::field::bn254::decompose;\nuse std::ops::{Add, Mul, Sub};\nfn main(x: Field, y: pub Field) -> pub Ordering {\n    let new_x = Quantized::new(x);\n    let new_y = Quantized::new(y);\n    let zero = Quantized::zero();\n    let add0 = new_x + zero;\n    let sub = add0 - new_y;\n    let mul = new_x * sub;\n    Quantized::cmp(mul, new_y)\n}\n\npub struct Quantized {\n    // if value positive: x*scale\n    // if negative: (p-x)*scale, where p is the prime of native Field (in this case from barretenberg)\n    // the original value is max 60 bits, positive or negative,\n    // this leaves enough space for additions and additions of single multiplications\n    // 2^60-1 = 1152921504606846975\n    // -1152921504606846975 <= x <= 1152921504606846975\n    // -1152921504606846975/65536 <= value <= 1152921504606846975/65536\n    pub x: Field,\n}\npub unconstrained fn get_bytes(x: Field) -> [u8; 32] {\n    x.to_be_bytes()\n}\n\n/// Check if the integer value is possitive based on the Field value used to\n/// encode it.\npub fn is_positive(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes == 0\n}\n\n// check if there are bytes from 0-15, then it is negative\n// This assumes the values that are multiplied have max ~60-63 bits\npub fn is_negative(x: Field) -> bool {\n    let (_, higher_bytes) = decompose(x);\n    higher_bytes != 0\n}\nimpl Quantized {\n\n    pub fn zero() -> Self {\n        Quantized { x: 0 }\n    }\n\n    pub fn new(x: Field) -> Self {\n        Self { x: x }\n    }\n\n    fn add(self: Self, other: Self) -> Self {\n        Quantized { x: self.x + other.x } // if one is negative, this wraps around automatically\n    }\n\n    fn sub(self: Self, other: Self) -> Self {\n        Quantized { x: self.x - other.x }\n    }\n\n    fn mul(self: Self, other: Self) -> Self {\n        let mut temp: Field = self.x * other.x;\n        let mut bytes: [u8; 32] = [0; 32];\n        // Safety: get_bytes is safe\n        unsafe {\n            bytes = get_bytes(temp);\n        }\n\n        assert(Field::from_be_bytes::<32>(bytes) == temp);\n\n        let negative = is_negative(temp);\n\n        // To correctly scale down we temporary flip the sign\n        if negative {\n            temp = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - temp\n                + 1;\n            // Safety: get_bytes is safe\n            unsafe {\n                bytes = get_bytes(temp);\n            }\n\n            assert(Field::from_be_bytes::<32>(bytes) == temp);\n        }\n\n        // Chop off 2 bytes to scale down by 2^16 and truncate\n        let mut truncated: [u8; 32] = [0; 32];\n        for i in 0..30 {\n            // [0, 0, am, .., a2] (chop off a0 and a1)\n            truncated[i + 2] = bytes[i];\n        }\n\n        let mut new_x: Field = Field::from_be_bytes::<32>(truncated);\n        // Flip back sign if the output is negative\n        if negative {\n            new_x = 21888242871839275222246405745257275088548364400416034343698204186575808495616\n                - new_x\n                + 1;\n        }\n\n        Quantized { x: new_x }\n    }\n}\n\nimpl Add for Quantized {\n    fn add(self, other: Self) -> Self {\n        self.add(other)\n    }\n}\n\nimpl Sub for Quantized {\n    fn sub(self, other: Self) -> Self {\n        self.sub(other)\n    }\n}\n\nimpl Mul for Quantized {\n    fn mul(self, other: Self) -> Self {\n        self.mul(other)\n    }\n}\n\nimpl Ord for Quantized { // TODO is it cheaper to create a function that returns a bool directly?\n    fn cmp(self: Self, other: Self) -> Ordering {\n        let self_positive = is_positive(self.x);\n        let other_positive = is_positive(other.x);\n        if self.x == other.x {\n            Ordering::equal()\n        } else if (self_positive & !other_positive) {\n            Ordering::greater()\n        } else if self_positive == other_positive {\n            let self_smallest = self.x.lt(other.x);\n            if self_smallest {\n                Ordering::less()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            Ordering::less()\n        }\n    }\n}\n","path":"/home/fabsits/co-snarks/co-noir/co-noir/examples/test_vectors/quantized/src/main.nr"}},"names":["main"],"brillig_names":["get_bytes","decompose_hint","lte_hint","field_less_than","directive_invert"]}